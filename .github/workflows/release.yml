# .github/workflows/release.yml

name: Release on Merge to Main

on:
  push:
    branches:
      - main  # Trigger only on pushes to main (e.g., after a PR is merged)

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Grant permissions to create releases and upload assets

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.6'  # Specify the Go version you need

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download  # Install dependencies

      - name: Build the binary
        run: CGO_ENABLED=0 go build -v -a -ldflags '-extldflags "-static"' -o hp_lto_max_temp hp_lto_max_temp.go  # Compile the binary

      - name: Set Release Version Tag
        id: tag_version
        run: |
          # Get the latest tag or start from v0.0.0 if no tags exist
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Extract major, minor, patch from the latest tag
          major=$(echo $latest_tag | cut -d. -f1 | sed 's/v//')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)
          # Increment the patch version
          new_patch=$((patch + 1))
          # Construct the new tag
          new_tag="v${major}.${minor}.${new_patch}"
          # Save the new tag to GITHUB_ENV to use it in later steps
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}                 # Use the new tag created above
          release_name: "Release ${{ env.new_tag }}"   # Name the release
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./hp_lto_max_temp               # Path to the binary
          asset_name: hp_lto_max_temp                 # Name for the uploaded binary
          asset_content_type: application/octet-stream
